name: CI with Docker Compose

on:
  push:
    branches:
      - main
      - develop
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev  # Define the environment

    steps:
      - name: üì• Clone repository
        uses: actions/checkout@v4

      - name: üîë Create .env file with secrets
        run: |
          echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> .env.ci
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.ci
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.ci
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env.ci
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env.ci
          echo "DATABASE_ADDRESS=${{ secrets.DATABASE_ADDRESS }}" >> .env.ci

      - name: üßº Clean previous containers and volumes
        run: |
          docker compose down -v || true
          docker system prune -f || true

      - name: üê≥ Start Docker Compose
        run: docker compose --env-file .env.ci up -d

      - name: ‚è≥ Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..40}; do
            docker compose exec -T db psql -U ${{ secrets.POSTGRES_USER }} -c "SELECT 1" && break
            echo "PostgreSQL not ready yet, waiting..."
            sleep 2
          done

      - name: üî• Drop & recreate DB
        run: |
          docker compose exec -T db psql -U ${{ secrets.POSTGRES_USER }} -d postgres -c "DROP DATABASE IF EXISTS ${{ secrets.DATABASE_NAME }};"
          docker compose exec -T db psql -U ${{ secrets.POSTGRES_USER }} -d postgres -c "CREATE DATABASE ${{ secrets.DATABASE_NAME }};"

      - name: üîÑ Run Alembic migrations
        run: docker compose exec -T api alembic upgrade head

      - name: üèó Check running services
        run: docker ps -a

      # - name: ‚úÖ Run tests
      #   run: docker compose exec api pytest --cov=src --cov-report=term-missing tests/ -v

      - name: Install MkDocs dependencies
        run: pip install mkdocs mkdocs-material

      - name: Build MkDocs documentation
        run: |
          cd docs
          mkdocs build --clean
          ls -la site

      - name: üßπ Cleanup containers
        if: always()
        run: docker compose down -v
