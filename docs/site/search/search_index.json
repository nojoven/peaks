{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Mountain Peaks API Documentation V1","text":"<p>This documentation provides a comprehensive guide to the Peaks API project, a simple web service for storing and retrieving mountain peak data.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Home</li> <li>Try it out</li> <li>API Reference</li> <li>Database</li> <li>Configuration</li> <li>CI/CD</li> <li>Security</li> </ul>"},{"location":"#home","title":"Home","text":"<p>Welcome to the Mountain Peaks API documentation. This API allows you to manage mountain peak data, including creating, reading, updating, and deleting peak records, as well as retrieving peaks within a specified geographical bounding box.</p> <p>This project is built using:</p> <ul> <li>FastAPI: For the asynchronous REST API.</li> <li>SQLAlchemy: For database interaction.</li> <li>Alembic: For database migrations.</li> <li>PostgreSQL: As the database backend.</li> <li>Docker &amp; Docker Compose: For containerization and deployment.</li> <li>GitHub Actions: For continuous integration and deployment.</li> </ul>"},{"location":"#try-it-out","title":"Try it out","text":"<p>This section guides you through making API requests using tools like Postman or <code>curl</code>.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed.</li> <li>Postman or <code>curl</code> for testing API endpoints.</li> </ul>"},{"location":"#running-the-api","title":"Running the API","text":"<ol> <li> <p>Clone the repository:</p> <p><code>bash git clone [https://github.com/nojoven/peaks.git](https://github.com/nojoven/peaks.git) cd peaks</code></p> </li> <li> <p>Start the containers:</p> <p><code>bash docker-compose up --build</code></p> </li> <li> <p>The API will be available at <code>http://localhost:8000</code>.</p> </li> </ol>"},{"location":"#example-requests","title":"Example Requests","text":"<ul> <li> <p>Create a Peak:</p> <p><code>bash curl -X POST -H \"Content-Type: application/json\" -d '{   \"name\": \"Mont Blanc\",   \"latitude\": 45.8326,   \"longitude\": 6.8652,   \"altitude\": 4808.73 }' http://localhost:8000/peaks/</code></p> </li> <li> <p>Get a Peak:</p> <p><code>bash curl http://localhost:8000/peaks/1</code></p> </li> <li> <p>Get Peaks within a bounding box:</p> <p><code>bash curl http://localhost:8000/peaks/?min_lat=44.5&amp;max_lat=46.5&amp;min_lon=5.5&amp;max_lon=7.5</code></p> </li> </ul>"},{"location":"#to-be-added","title":"To be added","text":"<ul> <li>Authentication and authorization.</li> <li>Input validation and error handling.</li> <li>Detailed error messages.</li> <li>Secret management.</li> <li>Web interface.</li> <li>More comprehensive documentation.</li> <li>Add more tests.</li> <li>Add security measures.</li> </ul>"},{"location":"api_reference/","title":"API Reference","text":"<p>This section documents the API endpoints and their parameters, reflecting the current implementation using FastAPI and SQLModel.</p>"},{"location":"api_reference/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /peaks/peak/{peak_id}</code>: Retrieve a peak by its ID.</li> <li>Parameters:<ul> <li><code>peak_id</code> (path parameter): Integer, the ID of the peak to retrieve.</li> </ul> </li> <li>Response:<ul> <li>Returns a JSON representation of the <code>Peak</code> object.</li> <li>Returns a 404 error if the peak is not found.</li> </ul> </li> <li> <p>Example: <code>GET /peaks/peak/1</code></p> </li> <li> <p><code>POST /peaks/peak/create</code>: Create a new peak.</p> </li> <li>Request Body:<ul> <li>JSON representation of the <code>Peak</code> object (name, latitude, longitude, altitude).</li> </ul> </li> <li>Response:<ul> <li>Returns a JSON representation of the created <code>Peak</code> object.</li> <li>Returns a 201 status code upon successful creation.</li> <li>Returns a 400 error if there is an issue with the creation.</li> </ul> </li> <li> <p>Example: <code>POST /peaks/peak/create</code> with JSON payload.</p> </li> <li> <p><code>POST /peaks/create</code>: Bulk create peaks from a list.</p> </li> <li>Request Body:<ul> <li>JSON array of <code>Peak</code> objects.</li> </ul> </li> <li>Response:<ul> <li>Returns a 201 status code upon successful creation.</li> <li>Returns a 400 error if there is an issue with the bulk creation.</li> </ul> </li> <li> <p>Example: <code>POST /peaks/create</code> with JSON array payload.</p> </li> <li> <p><code>PUT /peaks/peak/{peak_id}</code>: Update a peak by its ID.</p> </li> <li>Parameters:<ul> <li><code>peak_id</code> (path parameter): Integer, the ID of the peak to update.</li> </ul> </li> <li>Request Body:<ul> <li>JSON representation of the <code>Peak</code> object with updated fields.</li> </ul> </li> <li>Response:<ul> <li>Returns a 200 status code upon successful update.</li> <li>Returns a 404 error if the peak is not found.</li> </ul> </li> <li> <p>Example: <code>PUT /peaks/peak/1</code> with JSON payload.</p> </li> <li> <p><code>DELETE /peaks/peak/{peak_id}</code>: Delete a peak by its ID.</p> </li> <li>Parameters:<ul> <li><code>peak_id</code> (path parameter): Integer, the ID of the peak to delete.</li> </ul> </li> <li>Response:<ul> <li>Returns a 204 status code upon successful deletion.</li> <li>Returns a 404 error if the peak is not found.</li> </ul> </li> <li> <p>Example: <code>DELETE /peaks/peak/1</code></p> </li> <li> <p><code>GET /peaks/boundingbox</code>: Retrieve peaks within a given geographical bounding box.</p> </li> <li>Query Parameters:<ul> <li><code>min_lat</code> (float): Minimum latitude.</li> <li><code>max_lat</code> (float): Maximum latitude.</li> <li><code>min_lon</code> (float): Minimum longitude.</li> <li><code>max_lon</code> (float): Maximum longitude.</li> </ul> </li> <li>Response:<ul> <li>Returns a JSON array of <code>Peak</code> objects within the bounding box.</li> <li>Returns a 404 error if no peaks are found.</li> </ul> </li> <li>Example: <code>GET /peaks/boundingbox?min_lat=44.5&amp;max_lat=46.5&amp;min_lon=5.5&amp;max_lon=7.5</code></li> </ul>"},{"location":"api_reference/#data-models","title":"Data Models","text":"<ul> <li>Peak:</li> <li><code>id</code>: Integer (auto-incrementing)</li> <li><code>name</code>: String</li> <li><code>lat</code>: Float</li> <li><code>lon</code>: Float</li> <li><code>altitude</code>: Float</li> </ul>"},{"location":"api_reference/#dependencies","title":"Dependencies","text":"<ul> <li><code>db: Session = Depends(get_db)</code>: Injects a database session into each endpoint.</li> </ul>"},{"location":"api_reference/#error-handling","title":"Error Handling","text":"<ul> <li>Endpoints raise <code>HTTPException</code> with appropriate status codes (404, 400) and error details when necessary.</li> <li>Database transactions are rolled back in case of errors to maintain data integrity.</li> </ul>"},{"location":"ci_cd/","title":"CI/CD","text":"<p>GitHub Actions is used for continuous integration and deployment.</p>"},{"location":"ci_cd/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<ul> <li>Builds Docker images for test and production environments.</li> <li>Runs unit tests with coverage reporting.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>The API is configured using environment variables.</p>"},{"location":"database/","title":"Database","text":"<p>The API uses a PostgreSQL database to store peak data.</p>"},{"location":"database/#database-schema","title":"Database Schema","text":"<ul> <li><code>peaks</code> table:</li> <li><code>id</code> (SERIAL PRIMARY KEY)</li> <li><code>name</code> (VARCHAR)</li> <li><code>latitude</code> (FLOAT)</li> <li><code>longitude</code> (FLOAT)</li> <li><code>altitude</code> (FLOAT)</li> </ul>"},{"location":"database/#database-migrations","title":"Database Migrations","text":"<p>Alembic is used for database migrations.</p>"},{"location":"database/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>DATABASE_URL</code>: PostgreSQL database connection URL.</li> </ul>"},{"location":"security/","title":"Security","text":"<p>Currently, the API does not implement security measures. This section will be updated with information on securing the API.</p>"}]}